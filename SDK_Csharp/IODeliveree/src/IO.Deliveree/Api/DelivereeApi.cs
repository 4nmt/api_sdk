/* 
 * Deliveree API
 *
 * With Deliveree API, developers can integrate our on-demand local delivery platform into their applications. The API is designed for developers to check prices, book an immediate or scheduled delivery and follow updates until delivery completion.
 *
 * 
 * Contact: duke@deliveree.com
 * Generated by: https://deliveree.com
 */
using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using RestSharp;
using IO.Deliveree.Client;

namespace IO.Deliveree.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IDelivereeApi : IApiAccessor,
        IDeliveriesGetQuotePostApi, IVehicleTypesGetApi,
        //IFleetsGetApi, IDeliveriesPutUpdateSubtotalApi,
        IDeliveriesPostApi, IDeliveriesGetApi, IDeliveriesGetListApi, ICancelBookingApi
    {
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class DelivereeApi : IDelivereeApi
    {
        private IO.Deliveree.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="DelivereeApi"/> class.
        /// </summary>
        /// <returns></returns>
        public DelivereeApi(string basePath)
        {
            Configuration = new IO.Deliveree.Client.Configuration { BasePath = basePath };

            ExceptionFactory = IO.Deliveree.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DelivereeApi"/> class
        /// </summary>
        /// <returns></returns>
        public DelivereeApi()
        {
            Configuration = IO.Deliveree.Client.Configuration.Default;

            ExceptionFactory = IO.Deliveree.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="DelivereeApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public DelivereeApi(IO.Deliveree.Client.Configuration configuration = null)
        {
            if (configuration == null) // use the default one in Configuration
                Configuration = IO.Deliveree.Client.Configuration.Default;
            else
                Configuration = configuration;

            ExceptionFactory = IO.Deliveree.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return Configuration.ApiClient.RestClient.BaseUrl.ToString();
        }

        /// <summary>
        /// Sets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        [Obsolete("SetBasePath is deprecated, please do 'Configuration.ApiClient = new ApiClient(\"http://new-path\")' instead.")]
        public void SetBasePath(string basePath)
        {
            // do nothing
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public IO.Deliveree.Client.Configuration Configuration {get; set;}

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public IO.Deliveree.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Gets the default header.
        /// </summary>
        /// <returns>Dictionary of HTTP header</returns>
        [Obsolete("DefaultHeader is deprecated, please use Configuration.DefaultHeader instead.")]
        public IDictionary<string, string> DefaultHeader()
        {
            return new ReadOnlyDictionary<string, string>(Configuration.DefaultHeader);
        }

        /// <summary>
        /// Add default header.
        /// </summary>
        /// <param name="key">Header field name.</param>
        /// <param name="value">Header field value.</param>
        /// <returns></returns>
        [Obsolete("AddDefaultHeader is deprecated, please use Configuration.AddDefaultHeader instead.")]
        public void AddDefaultHeader(string key, string value)
        {
            Configuration.AddDefaultHeader(key, value);
        }

        #region Private Methods

        private Dictionary<string, string> CreateHeaderParams(
            string acceptLanguage = null,
            string[] localVarHttpHeaderAccepts = null)
        {
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);

            // to determine the Accept header
            string localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);
            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            if (acceptLanguage != null) localVarHeaderParams.Add("Accept-Language", Configuration.ApiClient.ParameterToString(acceptLanguage)); // header parameter
            // authentication (ApiKeyAuth) required
            if (!string.IsNullOrEmpty(Configuration.GetApiKeyWithPrefix("Authorization")))
            {
                localVarHeaderParams["Authorization"] = Configuration.GetApiKeyWithPrefix("Authorization");
            }
            return localVarHeaderParams;
        }

        private void HandleResponse(IRestResponse localVarResponse, string methodName)
        {
            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory(methodName, localVarResponse);
                if (exception != null) throw exception;
            }
        }

        #endregion

    }
}
