/* 
 * Deliveree API
 *
 * With Deliveree API, developers can integrate our on-demand local delivery platform into their applications. The API is designed for developers to check prices, book an immediate or scheduled delivery and follow updates until delivery completion.
 *
 * 
 * Contact: duke@deliveree.com
 * Generated by: https://deliveree.com
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using IDateTimeConverter = IO.Deliveree.Client.IDateTimeConverter;

namespace IO.Deliveree.Model
{
    /// <summary>
    /// Location
    /// </summary>
    [DataContract]
    public partial class Location : IEquatable<Location>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Location" /> class.
        /// </summary>
        /// <param name="address">address.</param>
        /// <param name="latitude">latitude.</param>
        /// <param name="longitude">longitude.</param>
        /// <param name="recipientName">recipientName.</param>
        /// <param name="recipientPhone">recipientPhone.</param>
        /// <param name="note">note.</param>
        /// <param name="needCod">needCod.</param>
        /// <param name="codNote">codNote.</param>
        /// <param name="codInvoiceFees">codInvoiceFees.</param>
        /// <param name="needPod">needPod.</param>
        /// <param name="podNote">podNote.</param>
        /// <param name="positionTrackings">positionTrackings.</param>
        public Location(string address = default(string), double? latitude = default(double?), double? longitude = default(double?), string recipientName = default(string), string recipientPhone = default(string), string note = default(string), bool? needCod = default(bool?), string codNote = default(string), double? codInvoiceFees = default(double?), bool? needPod = default(bool?), string podNote = default(string), List<PositionTracking> positionTrackings = default(List<PositionTracking>))
        {
            this.Address = address;
            this.Latitude = latitude;
            this.Longitude = longitude;
            this.RecipientName = recipientName;
            this.RecipientPhone = recipientPhone;
            this.Note = note;
            this.NeedCod = needCod;
            this.CodNote = codNote;
            this.CodInvoiceFees = codInvoiceFees;
            this.NeedPod = needPod;
            this.PodNote = podNote;
            this.PositionTrackings = positionTrackings;
        }

        /// <summary>
        /// Gets or Sets Address
        /// </summary>
        [DataMember(Name = "address", EmitDefaultValue = false)]
        public string Address { get; set; }

        /// <summary>
        /// Gets or Sets Latitude
        /// </summary>
        [DataMember(Name = "latitude", EmitDefaultValue = false)]
        public double? Latitude { get; set; }

        /// <summary>
        /// Gets or Sets Longitude
        /// </summary>
        [DataMember(Name = "longitude", EmitDefaultValue = false)]
        public double? Longitude { get; set; }

        /// <summary>
        /// Gets or Sets RecipientName
        /// </summary>
        [DataMember(Name = "recipient_name", EmitDefaultValue = false)]
        public string RecipientName { get; set; }

        /// <summary>
        /// Gets or Sets RecipientPhone
        /// </summary>
        [DataMember(Name = "recipient_phone", EmitDefaultValue = false)]
        public string RecipientPhone { get; set; }

        /// <summary>
        /// Gets or Sets Note
        /// </summary>
        [DataMember(Name = "note", EmitDefaultValue = false)]
        public string Note { get; set; }

        /// <summary>
        /// Gets or Sets NeedCod
        /// </summary>
        [DataMember(Name = "need_cod", EmitDefaultValue = false)]
        public bool? NeedCod { get; set; }

        /// <summary>
        /// Gets or Sets CodNote
        /// </summary>
        [DataMember(Name = "cod_note", EmitDefaultValue = false)]
        public string CodNote { get; set; }

        /// <summary>
        /// Gets or Sets CodInvoiceFees
        /// </summary>
        [DataMember(Name = "cod_invoice_fees", EmitDefaultValue = false)]
        public double? CodInvoiceFees { get; set; }

        /// <summary>
        /// Gets or Sets NeedPod
        /// </summary>
        [DataMember(Name = "need_pod", EmitDefaultValue = false)]
        public bool? NeedPod { get; set; }

        /// <summary>
        /// Gets or Sets PodNote
        /// </summary>
        [DataMember(Name = "pod_note", EmitDefaultValue = false)]
        public string PodNote { get; set; }

        /// <summary>
        /// Gets or Sets PositionTrackings
        /// </summary>
        [DataMember(Name = "position_trackings", EmitDefaultValue = false)]
        public List<PositionTracking> PositionTrackings { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Location {\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  Latitude: ").Append(Latitude).Append("\n");
            sb.Append("  Longitude: ").Append(Longitude).Append("\n");
            sb.Append("  RecipientName: ").Append(RecipientName).Append("\n");
            sb.Append("  RecipientPhone: ").Append(RecipientPhone).Append("\n");
            sb.Append("  Note: ").Append(Note).Append("\n");
            sb.Append("  NeedCod: ").Append(NeedCod).Append("\n");
            sb.Append("  CodNote: ").Append(CodNote).Append("\n");
            sb.Append("  CodInvoiceFees: ").Append(CodInvoiceFees).Append("\n");
            sb.Append("  NeedPod: ").Append(NeedPod).Append("\n");
            sb.Append("  PodNote: ").Append(PodNote).Append("\n");
            sb.Append("  PositionTrackings: ").Append(PositionTrackings).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Location);
        }

        /// <summary>
        /// Returns true if Location instances are equal
        /// </summary>
        /// <param name="input">Instance of Location to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Location input)
        {
            if (input == null)
                return false;

            return
                (
                    this.Address == input.Address ||
                    (this.Address != null &&
                    this.Address.Equals(input.Address))
                ) &&
                (
                    this.Latitude == input.Latitude ||
                    (this.Latitude != null &&
                    this.Latitude.Equals(input.Latitude))
                ) &&
                (
                    this.Longitude == input.Longitude ||
                    (this.Longitude != null &&
                    this.Longitude.Equals(input.Longitude))
                ) &&
                (
                    this.RecipientName == input.RecipientName ||
                    (this.RecipientName != null &&
                    this.RecipientName.Equals(input.RecipientName))
                ) &&
                (
                    this.RecipientPhone == input.RecipientPhone ||
                    (this.RecipientPhone != null &&
                    this.RecipientPhone.Equals(input.RecipientPhone))
                ) &&
                (
                    this.Note == input.Note ||
                    (this.Note != null &&
                    this.Note.Equals(input.Note))
                ) &&
                (
                    this.NeedCod == input.NeedCod ||
                    (this.NeedCod != null &&
                    this.NeedCod.Equals(input.NeedCod))
                ) &&
                (
                    this.CodNote == input.CodNote ||
                    (this.CodNote != null &&
                    this.CodNote.Equals(input.CodNote))
                ) &&
                (
                    this.CodInvoiceFees == input.CodInvoiceFees ||
                    (this.CodInvoiceFees != null &&
                    this.CodInvoiceFees.Equals(input.CodInvoiceFees))
                ) &&
                (
                    this.NeedPod == input.NeedPod ||
                    (this.NeedPod != null &&
                    this.NeedPod.Equals(input.NeedPod))
                ) &&
                (
                    this.PodNote == input.PodNote ||
                    (this.PodNote != null &&
                    this.PodNote.Equals(input.PodNote))
                ) &&
                (
                    this.PositionTrackings == input.PositionTrackings ||
                    this.PositionTrackings != null &&
                    input.PositionTrackings != null &&
                    this.PositionTrackings.SequenceEqual(input.PositionTrackings)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Address != null)
                    hashCode = hashCode * 59 + this.Address.GetHashCode();
                if (this.Latitude != null)
                    hashCode = hashCode * 59 + this.Latitude.GetHashCode();
                if (this.Longitude != null)
                    hashCode = hashCode * 59 + this.Longitude.GetHashCode();
                if (this.RecipientName != null)
                    hashCode = hashCode * 59 + this.RecipientName.GetHashCode();
                if (this.RecipientPhone != null)
                    hashCode = hashCode * 59 + this.RecipientPhone.GetHashCode();
                if (this.Note != null)
                    hashCode = hashCode * 59 + this.Note.GetHashCode();
                if (this.NeedCod != null)
                    hashCode = hashCode * 59 + this.NeedCod.GetHashCode();
                if (this.CodNote != null)
                    hashCode = hashCode * 59 + this.CodNote.GetHashCode();
                if (this.CodInvoiceFees != null)
                    hashCode = hashCode * 59 + this.CodInvoiceFees.GetHashCode();
                if (this.NeedPod != null)
                    hashCode = hashCode * 59 + this.NeedPod.GetHashCode();
                if (this.PodNote != null)
                    hashCode = hashCode * 59 + this.PodNote.GetHashCode();
                if (this.PositionTrackings != null)
                    hashCode = hashCode * 59 + this.PositionTrackings.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
