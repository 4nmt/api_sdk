/* 
 * Deliveree API
 *
 * With Deliveree API, developers can integrate our on-demand local delivery platform into their applications. The API is designed for developers to check prices, book an immediate or scheduled delivery and follow updates until delivery completion.
 *
 * 
 * Contact: duke@deliveree.com
 * Generated by: https://deliveree.com
 */
using System;
using System.Linq;
using System.Text;
using System.Collections.Generic;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;

namespace IO.Deliveree.Model
{
    /// <summary>
    /// Delivery
    /// </summary>
    [DataContract]
    public partial class Delivery : IEquatable<Delivery>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="Delivery" /> class.
        /// </summary>
        /// <param name="vehicleTypeId">vehicleTypeId.</param>
        /// <param name="note">note.</param>
        /// <param name="timeType">timeType.</param>
        /// <param name="pickupTime">pickupTime.</param>
        /// <param name="jobOrderNumber">jobOrderNumber.</param>
        /// <param name="allowParkingFees">allowParkingFees.</param>
        /// <param name="allowTollsFees">allowTollsFees.</param>
        /// <param name="allowWaitingTimeFees">allowWaitingTimeFees.</param>
        /// <param name="fleetPartnerId">fleetPartnerId.</param>
        /// <param name="containerSize">containerSize.</param>
        /// <param name="locations">locations.</param>
        public Delivery(int? vehicleTypeId = default(int?),
                        string note = default(string),
                        string timeType = default(string),
                        DateTime? pickupTime = default(DateTime?),
                        string jobOrderNumber = default(string),
                        bool? allowParkingFees = default(bool?),
                        bool? allowTollsFees = default(bool?),
                        bool? allowWaitingTimeFees = default(bool?),
                        int? fleetPartnerId = default(int?),
                        string containerSize = default(string),
                        List<Location> locations = default(List<Location>),
                        bool? optimizeRoute = default(bool?),
                        bool? sendFirstToFavorite = default(bool?),
                        bool? require_signatures = default(bool?))
        {
            this.VehicleTypeId = vehicleTypeId;
            this.Note = note;
            this.TimeType = timeType;
            this.PickupTime = pickupTime;
            this.JobOrderNumber = jobOrderNumber;
            this.AllowParkingFees = allowParkingFees;
            this.AllowTollsFees = allowTollsFees;
            this.AllowWaitingTimeFees = allowWaitingTimeFees;
            this.FleetPartnerId = fleetPartnerId;
            this.ContainerSize = containerSize;
            this.Locations = locations;
            this.OptimizeRoute = optimizeRoute;
            this.SendFirstToFavorite = sendFirstToFavorite;
            this.RequireSignatures = require_signatures;
        }

        /// <summary>
        /// Gets or Sets VehicleTypeId
        /// </summary>
        [DataMember(Name = "vehicle_type_id", EmitDefaultValue = false)]
        public int? VehicleTypeId { get; set; }

        /// <summary>
        /// Gets or Sets Note
        /// </summary>
        [DataMember(Name = "note", EmitDefaultValue = false)]
        public string Note { get; set; }

        /// <summary>
        /// Gets or Sets TimeType
        /// </summary>
        [DataMember(Name = "time_type", EmitDefaultValue = false)]
        public string TimeType { get; set; }

        /// <summary>
        /// Gets or Sets PickupTime
        /// </summary>
        [DataMember(Name = "pickup_time", EmitDefaultValue = false)]
        public DateTime? PickupTime { get; set; }

        /// <summary>
        /// Gets or Sets JobOrderNumber
        /// </summary>
        [DataMember(Name = "job_order_number", EmitDefaultValue = false)]
        public string JobOrderNumber { get; set; }

        /// <summary>
        /// Gets or Sets AllowParkingFees
        /// </summary>
        [DataMember(Name = "allow_parking_fees", EmitDefaultValue = false)]
        public bool? AllowParkingFees { get; set; }

        /// <summary>
        /// Gets or Sets AllowTollsFees
        /// </summary>
        [DataMember(Name = "allow_tolls_fees", EmitDefaultValue = false)]
        public bool? AllowTollsFees { get; set; }

        /// <summary>
        /// Gets or Sets AllowWaitingTimeFees
        /// </summary>
        [DataMember(Name = "allow_waiting_time_fees", EmitDefaultValue = false)]
        public bool? AllowWaitingTimeFees { get; set; }
        /// <summary>
        /// Gets or Sets OptimizeRoute
        /// </summary>
        [DataMember(Name = "optimize_route", EmitDefaultValue = false)]
        public bool? OptimizeRoute { get; set; }
        /// <summary>
        /// Gets or Sets SendFirstToFavorite
        /// </summary>
        [DataMember(Name = "send_first_to_favorite", EmitDefaultValue = false)]
        public bool? SendFirstToFavorite { get; set; }
        /// <summary>
        /// Gets or Sets RequireSignatures
        /// </summary>
        [DataMember(Name = "require_signatures", EmitDefaultValue = false)]
        public bool? RequireSignatures { get; set; }
        /// <summary>
        /// Gets or Sets FleetPartnerId
        /// </summary>
        [DataMember(Name = "fleet_partner_id", EmitDefaultValue = false)]
        public int? FleetPartnerId { get; set; }

        /// <summary>
        /// Gets or Sets ContainerSize
        /// </summary>
        [DataMember(Name = "container_size", EmitDefaultValue = false)]
        public string ContainerSize { get; set; }

        /// <summary>
        /// Gets or Sets Locations
        /// </summary>
        [DataMember(Name = "locations", EmitDefaultValue = false)]
        public List<Location> Locations { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Delivery {\n");
            sb.Append("  VehicleTypeId: ").Append(VehicleTypeId).Append("\n");
            sb.Append("  Note: ").Append(Note).Append("\n");
            sb.Append("  TimeType: ").Append(TimeType).Append("\n");
            sb.Append("  PickupTime: ").Append(PickupTime).Append("\n");
            sb.Append("  JobOrderNumber: ").Append(JobOrderNumber).Append("\n");
            sb.Append("  AllowParkingFees: ").Append(AllowParkingFees).Append("\n");
            sb.Append("  AllowTollsFees: ").Append(AllowTollsFees).Append("\n");
            sb.Append("  AllowWaitingTimeFees: ").Append(AllowWaitingTimeFees).Append("\n");
            sb.Append("  FleetPartnerId: ").Append(FleetPartnerId).Append("\n");
            sb.Append("  ContainerSize: ").Append(ContainerSize).Append("\n");
            sb.Append("  Locations: ").Append(Locations).Append("\n");
            sb.Append("  OptimizeRoute: ").Append(OptimizeRoute).Append("\n");
            sb.Append("  SendFirstToFavorite: ").Append(SendFirstToFavorite).Append("\n");
            sb.Append("  RequireSignatures: ").Append(RequireSignatures).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Delivery);
        }

        /// <summary>
        /// Returns true if Delivery instances are equal
        /// </summary>
        /// <param name="input">Instance of Delivery to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Delivery input)
        {
            if (input == null)
                return false;

            return
                (
                    this.VehicleTypeId == input.VehicleTypeId ||
                    (this.VehicleTypeId != null &&
                    this.VehicleTypeId.Equals(input.VehicleTypeId))
                ) &&
                (
                    this.Note == input.Note ||
                    (this.Note != null &&
                    this.Note.Equals(input.Note))
                ) &&
                (
                    this.TimeType == input.TimeType ||
                    (this.TimeType != null &&
                    this.TimeType.Equals(input.TimeType))
                ) &&
                (
                    this.PickupTime == input.PickupTime ||
                    (this.PickupTime != null &&
                    this.PickupTime.Equals(input.PickupTime))
                ) &&
                (
                    this.JobOrderNumber == input.JobOrderNumber ||
                    (this.JobOrderNumber != null &&
                    this.JobOrderNumber.Equals(input.JobOrderNumber))
                ) &&
                (
                    this.AllowParkingFees == input.AllowParkingFees ||
                    (this.AllowParkingFees != null &&
                    this.AllowParkingFees.Equals(input.AllowParkingFees))
                ) &&
                (
                    this.AllowTollsFees == input.AllowTollsFees ||
                    (this.AllowTollsFees != null &&
                    this.AllowTollsFees.Equals(input.AllowTollsFees))
                ) &&
                (
                    this.AllowWaitingTimeFees == input.AllowWaitingTimeFees ||
                    (this.AllowWaitingTimeFees != null &&
                    this.AllowWaitingTimeFees.Equals(input.AllowWaitingTimeFees))
                ) &&
                (
                    this.FleetPartnerId == input.FleetPartnerId ||
                    (this.FleetPartnerId != null &&
                    this.FleetPartnerId.Equals(input.FleetPartnerId))
                ) &&
                (
                    this.ContainerSize == input.ContainerSize ||
                    (this.ContainerSize != null &&
                    this.ContainerSize.Equals(input.ContainerSize))
                ) &&
                (
                    this.Locations == input.Locations ||
                    this.Locations != null &&
                    input.Locations != null &&
                    this.Locations.SequenceEqual(input.Locations)
                ) &&
                (
                    this.OptimizeRoute == input.OptimizeRoute ||
                    (this.OptimizeRoute != null &&
                    this.OptimizeRoute.Equals(input.OptimizeRoute))
                ) &&
                (
                    this.SendFirstToFavorite == input.SendFirstToFavorite ||
                    (this.SendFirstToFavorite != null &&
                    this.SendFirstToFavorite.Equals(input.SendFirstToFavorite))
                ) &&
                (
                    this.RequireSignatures == input.RequireSignatures ||
                    (this.RequireSignatures != null &&
                    this.RequireSignatures.Equals(input.RequireSignatures))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.VehicleTypeId != null)
                    hashCode = hashCode * 59 + this.VehicleTypeId.GetHashCode();
                if (this.Note != null)
                    hashCode = hashCode * 59 + this.Note.GetHashCode();
                if (this.TimeType != null)
                    hashCode = hashCode * 59 + this.TimeType.GetHashCode();
                if (this.PickupTime != null)
                    hashCode = hashCode * 59 + this.PickupTime.GetHashCode();
                if (this.JobOrderNumber != null)
                    hashCode = hashCode * 59 + this.JobOrderNumber.GetHashCode();
                if (this.AllowParkingFees != null)
                    hashCode = hashCode * 59 + this.AllowParkingFees.GetHashCode();
                if (this.AllowTollsFees != null)
                    hashCode = hashCode * 59 + this.AllowTollsFees.GetHashCode();
                if (this.AllowWaitingTimeFees != null)
                    hashCode = hashCode * 59 + this.AllowWaitingTimeFees.GetHashCode();
                if (this.FleetPartnerId != null)
                    hashCode = hashCode * 59 + this.FleetPartnerId.GetHashCode();
                if (this.ContainerSize != null)
                    hashCode = hashCode * 59 + this.ContainerSize.GetHashCode();
                if (this.Locations != null)
                    hashCode = hashCode * 59 + this.Locations.GetHashCode();
                if (this.OptimizeRoute != null)
                    hashCode = hashCode * 59 + this.OptimizeRoute.GetHashCode();
                if (this.SendFirstToFavorite != null)
                    hashCode = hashCode * 59 + this.SendFirstToFavorite.GetHashCode();
                if (this.RequireSignatures != null)
                    hashCode = hashCode * 59 + this.RequireSignatures.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
